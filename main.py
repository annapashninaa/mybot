import logging
from datetime import datetime

import requests
from peewee import fn
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Updater, CommandHandler, MessageHandler,  filters as Filters,
    CallbackContext, ConversationHandler, CallbackQueryHandler
)


from config import TELEGRAM_TOKEN, KINOPOISK_API_KEY
from database.models import User, SearchHistory

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
TITLE, GENRE, COUNT, BUDGET_TYPE, DATE_SELECT = range(5)
KINOPOISK_API_URL = "https://api.kinopoisk.dev/v1.3/movie"


def start(update: Update, context: CallbackContext) -> None:
    user, created = User.get_or_create(
        user_id=update.effective_user.id,
        defaults={'username': update.effective_user.username}
    )
    update.message.reply_text(
        f"üé¨ –ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}!\n"
        "–Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º—ã –ø–æ —Ç–≤–æ–∏–º –∑–∞–ø—Ä–æ—Å–∞–º.\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/movie_search - –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞\n"
        "/movie_by_rating - –§–∏–ª—å–º—ã –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É\n"
        "/low_budget_movie - –ù–∏–∑–∫–æ–±—é–¥–∂–µ—Ç–Ω—ã–µ —Ñ–∏–ª—å–º—ã\n"
        "/high_budget_movie - –í—ã—Å–æ–∫–æ–±—é–¥–∂–µ—Ç–Ω—ã–µ —Ñ–∏–ª—å–º—ã\n"
        "/history - –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞"
    )


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ movie_search (–ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é)
def movie_search(update: Update, context: CallbackContext) -> int:
    update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:")
    return TITLE


def process_title(update: Update, context: CallbackContext) -> int:
    context.user_data['title'] = update.message.text
    update.message.reply_text("üé≠ –í–≤–µ–¥–∏—Ç–µ –∂–∞–Ω—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–º–µ–¥–∏—è):")
    return GENRE


def process_genre(update: Update, context: CallbackContext) -> int:
    context.user_data['genre'] = update.message.text.lower()
    update.message.reply_text("üî¢ –°–∫–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∫–∞–∑–∞—Ç—å? (1-10)")
    return COUNT


def process_count(update: Update, context: CallbackContext) -> int:
    try:
        count = int(update.message.text)
        if not 1 <= count <= 10:
            raise ValueError
    except ValueError:
        update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ! –í–≤–µ–¥–∏—Ç–µ –æ—Ç 1 –¥–æ 10.")
        return COUNT

    headers = {"X-API-KEY": KINOPOISK_API_KEY}
    params = {
        "name": context.user_data['title'],
        "genres.name": context.user_data['genre'],
        "limit": count,
        "selectFields": ["name", "description", "rating", "year", "genres", "ageRating", "poster"]
    }

    try:
        response = requests.get(KINOPOISK_API_URL, headers=headers, params=params)
        response.raise_for_status()

        movies = response.json().get('docs', [])
        if not movies:
            update.message.reply_text("üòû –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return ConversationHandler.END

        for i, movie in enumerate(movies):
            keyboard = [[
                InlineKeyboardButton("–û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–º", callback_data=f"watched_{movie['id']}"),
                InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π", callback_data=f"next_{i + 1}")
            ]]

            update.message.reply_photo(
                photo=movie.get('poster', {}).get('url'),
                caption=f"üé¨ <b>{movie.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n"
                        f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {movie.get('rating', {}).get('kp', 'N/A')}\n"
                        f"üìÖ –ì–æ–¥: {movie.get('year', 'N/A')}\n"
                        f"üé≠ –ñ–∞–Ω—Ä—ã: {', '.join([g['name'] for g in movie.get('genres', [])])}\n"
                        f"üîû –í–æ–∑—Ä–∞—Å—Ç: {movie.get('ageRating', '0+')}+\n"
                        f"üìñ –û–ø–∏—Å–∞–Ω–∏–µ: {movie.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

            SearchHistory.create(
                user=User.get(User.user_id == update.effective_user.id),
                search_date=datetime.now(),
                title=movie.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                description=movie.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'),
                rating=movie.get('rating', {}).get('kp', 0),
                year=movie.get('year', 0),
                genre=', '.join([g['name'] for g in movie.get('genres', [])]),
                age_rating=movie.get('ageRating', '0+'),
                poster_url=movie.get('poster', {}).get('url', '')
            )
            break  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏

    except requests.exceptions.HTTPError as e:
        logger.error(f"API error: {e}")
        update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ!")
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ.")

    return ConversationHandler.END


def low_budget_movie(update: Update, context: CallbackContext) -> None:
    context.user_data['budget_type'] = 'low'
    search_movies_by_budget(update, context)


def high_budget_movie(update: Update, context: CallbackContext) -> None:
    context.user_data['budget_type'] = 'high'
    search_movies_by_budget(update, context)


def search_movies_by_budget(update: Update, context: CallbackContext):
    headers = {"X-API-KEY": KINOPOISK_API_KEY}
    params = {
        "limit": 5,
        "sortField": "budget.value",
        "sortType": "1" if context.user_data.get('budget_type') == 'low' else "-1",
        "selectFields": ["name", "description", "rating", "year", "genres", "ageRating", "poster", "budget"]
    }

    try:
        response = requests.get(KINOPOISK_API_URL, headers=headers, params=params)
        response.raise_for_status()

        movies = response.json().get('docs', [])
        if not movies:
            update.message.reply_text("üòû –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return

        for movie in movies:
            budget_value = movie.get('budget', {}).get('value', 'N/A')
            budget_currency = movie.get('budget', {}).get('currency', '')

            message = (
                f"üé¨ <b>{movie.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n"
                f"üí∞ –ë—é–¥–∂–µ—Ç: {budget_value} {budget_currency}\n"
                f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {movie.get('rating', {}).get('kp', 'N/A')}\n"
                f"üìÖ –ì–æ–¥: {movie.get('year', 'N/A')}\n"
                f"üé≠ –ñ–∞–Ω—Ä—ã: {', '.join([g['name'] for g in movie.get('genres', [])])}\n"
                f"üîû –í–æ–∑—Ä–∞—Å—Ç: {movie.get('ageRating', '0+')}+\n"
                f"üìñ –û–ø–∏—Å–∞–Ω–∏–µ: {movie.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}"
            )

            update.message.reply_photo(
                photo=movie.get('poster', {}).get('url'),
                caption=message,
                parse_mode='HTML'
            )
    except requests.exceptions.HTTPError as e:
        logger.error(f"API error: {e}")
        update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ!")
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ.")


def history(update: Update, context: CallbackContext) -> int:
    update.message.reply_text("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
    return DATE_SELECT


def process_date(update: Update, context: CallbackContext) -> int:
    try:
        selected_date = datetime.strptime(update.message.text, '%Y-%m-%d').date()
    except ValueError:
        update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.")
        return ConversationHandler.END

    user = User.get(User.user_id == update.effective_user.id)
    history_entries = SearchHistory.select().where(
        (SearchHistory.user == user) & (fn.DATE(SearchHistory.search_date) == selected_date)
    ).limit(10)

    if not history_entries:
        update.message.reply_text("üìÇ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ –∑–∞ —ç—Ç—É –¥–∞—Ç—É –ø—É—Å—Ç–∞!")
        return ConversationHandler.END

    for entry in history_entries:
        update.message.reply_photo(
            photo=entry.poster_url,
            caption=f"üìÖ {entry.search_date.strftime('%d.%m.%Y %H:%M')}\n"
                    f"üé¨ {entry.title}\n"
                    f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {entry.rating}\n"
                    f"üìÖ –ì–æ–¥: {entry.year}\n"
                    f"üé≠ –ñ–∞–Ω—Ä—ã: {entry.genre}",
            parse_mode='HTML'
        )

    return ConversationHandler.END


def handle_callback_query(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    if query.data.startswith("watched_"):
        movie_id = query.data.split("_")[1]
        user = User.get(User.user_id == query.effective_user.id)
        try:
            movie = SearchHistory.get(
                (SearchHistory.user == user) & (SearchHistory.title == movie_id)
            )
            movie.watched = True
            movie.save()
            query.edit_message_caption(caption=f"{query.message.caption}\n\n‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ!")
        except SearchHistory.DoesNotExist:
            logger.warning(f"Movie with ID {movie_id} not found in history for user {user.user_id}")
            query.edit_message_text("–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏–∏.")
    elif query.data.startswith("next_"):
        index = int(query.data.split("_")[1])
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–∫–∞–∑–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–∑ context.user_data
        query.edit_message_text(f"–ü–æ–∫–∞–∑–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç {index}.")  # –ó–∞–≥–ª—É—à–∫–∞


def error_handler(update: Update, context: CallbackContext):
    logger.error(msg="–û—à–∏–±–∫–∞:", exc_info=context.error)
    update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ.")


def main():
    updater = Updater(TELEGRAM_TOKEN)
    dispatcher = updater.dispatcher

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è movie_search
    search_conv_handler = ConversationHandler(
        entry_points=[CommandHandler('movie_search', movie_search)],
        states={
            TITLE: [MessageHandler(Filters.text & ~Filters.command, process_title)],
            GENRE: [MessageHandler(Filters.text & ~Filters.command, process_genre)],
            COUNT: [MessageHandler(Filters.text & ~Filters.command, process_count)]
        },
        fallbacks=[]
    )
    dispatcher.add_handler(search_conv_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è history
    history_conv_handler = ConversationHandler(
        entry_points=[CommandHandler('history', history)],
        states={
            DATE_SELECT: [MessageHandler(Filters.text & ~Filters.command, process_date)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]  # –î–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ cancel
    )
    dispatcher.add_handler(history_conv_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è budget
    dispatcher.add_handler(CommandHandler("low_budget_movie", low_budget_movie))
    dispatcher.add_handler(CommandHandler("high_budget_movie", high_budget_movie))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    dispatcher.add_handler(CallbackQueryHandler(handle_callback_query))

    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_error_handler(error_handler)

    updater.start_polling()
    updater.idle()


def cancel(update: Update, context: CallbackContext) -> int:
    update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END


if __name__ == '__main__':
    main()

